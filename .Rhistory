#===================================
proposal = function(theta) {
## jumping distribution
## choosing the standard deviation of the jumping distribution is discretionary and will affect the acceptance ratio. The ideal acceptance ratio is 10-40%.
New=theta+rnorm(3)*c(0.01,0.01,0.01)
return(New)
}
#===================================
NREP = 3000
## starting values
lambda = 0.3
p1 = 0.5
p2 = 0.2
mchain = data.frame(lambda=rep(NA,NREP),p1=rep(NA,NREP), p2=rep(NA,NREP))
#===================================
mchain[1,] = theta = c(lambda, p1, p2)
## keep track of acceptance rate
acc = 0;
for(i in 2:NREP) {
## lambda
thetaCandidate = proposal(theta)
alpha = logpost(thetaCandidate)-logpost(theta)
if( runif(1) <= exp(alpha) ) {
acc = acc+1
theta=thetaCandidate
}
## update chain components
mchain[i,] = theta
}
#===================================
accept.ratio=acc/NREP
print(paste('Acceptance Ratio:', accept.ratio, sep=' '))
par(mfrow=c(1,3))
plot(mchain[0:NREP,1],type="l",main="lambda",ylim=0:1)
plot(mchain[0:NREP,2],type="l",main="p1",ylim=0:1)
plot(mchain[0:NREP,3],type="l",main="p2",ylim=0:1)
print(paste('Lambda Mean:', mean(mchain[0:NREP,1]), sep=' '))
print(paste('p1 Mean:', mean(mchain[0:NREP,2]), sep=' '))
print(paste('p2 Mean:', mean(mchain[0:NREP,3]), sep=' '))
set.seed(3)
#Generate data
N=100
n=rpois(N,50)
y1=rbinom(N,n,0.6)  #CpG
y2=rbinom(N,n,0.1)  #non-CpG
y=ifelse(runif(N)<0.2, y1, y2)
#===================================
## logposterior
logpost = function(theta) {
lambda=theta[1]
p1=theta[2]
p2=theta[3]
if(lambda>=1|p1>1|p2>=1|lambda<=0|p1<=0|p2<0|p1<p2)
return(-999999)
return(sum(log(lambda*p1^y*(1-p1)^(n-y) + (1-lambda)*p2^y*(1-p2)^(n-y))))
}
#===================================
proposal = function(theta) {
## jumping distribution
## choosing the standard deviation of the jumping distribution is discretionary and will affect the acceptance ratio. The ideal acceptance ratio is 10-40%.
New=theta+rnorm(3, sd = 2)*c(0.01,0.01,0.01)
return(New)
}
#===================================
NREP = 3000
## starting values
lambda = 0.3
p1 = 0.5
p2 = 0.2
mchain = data.frame(lambda=rep(NA,NREP),p1=rep(NA,NREP), p2=rep(NA,NREP))
#===================================
mchain[1,] = theta = c(lambda, p1, p2)
## keep track of acceptance rate
acc = 0;
for(i in 2:NREP) {
## lambda
thetaCandidate = proposal(theta)
alpha = logpost(thetaCandidate)-logpost(theta)
if( runif(1) <= exp(alpha) ) {
acc = acc+1
theta=thetaCandidate
}
## update chain components
mchain[i,] = theta
}
#===================================
accept.ratio=acc/NREP
print(paste('Acceptance Ratio:', accept.ratio, sep=' '))
par(mfrow=c(1,3))
plot(mchain[0:NREP,1],type="l",main="lambda",ylim=0:1)
plot(mchain[0:NREP,2],type="l",main="p1",ylim=0:1)
plot(mchain[0:NREP,3],type="l",main="p2",ylim=0:1)
print(paste('Lambda Mean:', mean(mchain[0:NREP,1]), sep=' '))
print(paste('p1 Mean:', mean(mchain[0:NREP,2]), sep=' '))
print(paste('p2 Mean:', mean(mchain[0:NREP,3]), sep=' '))
set.seed(3)
#Generate data
N=100
n=rpois(N,50)
y1=rbinom(N,n,0.6)  #CpG
y2=rbinom(N,n,0.1)  #non-CpG
y=ifelse(runif(N)<0.2, y1, y2)
#===================================
## logposterior
logpost = function(theta) {
lambda=theta[1]
p1=theta[2]
p2=theta[3]
if(lambda>=1|p1>1|p2>=1|lambda<=0|p1<=0|p2<0|p1<p2)
return(-999999)
return(sum(log(lambda*p1^y*(1-p1)^(n-y) + (1-lambda)*p2^y*(1-p2)^(n-y))))
}
#===================================
proposal = function(theta) {
## jumping distribution
## choosing the standard deviation of the jumping distribution is discretionary and will affect the acceptance ratio. The ideal acceptance ratio is 10-40%.
New=theta+rnorm(3, sd = 0.5)*c(0.01,0.01,0.01)
return(New)
}
#===================================
NREP = 3000
## starting values
lambda = 0.3
p1 = 0.5
p2 = 0.2
mchain = data.frame(lambda=rep(NA,NREP),p1=rep(NA,NREP), p2=rep(NA,NREP))
#===================================
mchain[1,] = theta = c(lambda, p1, p2)
## keep track of acceptance rate
acc = 0;
for(i in 2:NREP) {
## lambda
thetaCandidate = proposal(theta)
alpha = logpost(thetaCandidate)-logpost(theta)
if( runif(1) <= exp(alpha) ) {
acc = acc+1
theta=thetaCandidate
}
## update chain components
mchain[i,] = theta
}
#===================================
accept.ratio=acc/NREP
print(paste('Acceptance Ratio:', accept.ratio, sep=' '))
par(mfrow=c(1,3))
plot(mchain[0:NREP,1],type="l",main="lambda",ylim=0:1)
plot(mchain[0:NREP,2],type="l",main="p1",ylim=0:1)
plot(mchain[0:NREP,3],type="l",main="p2",ylim=0:1)
print(paste('Lambda Mean:', mean(mchain[0:NREP,1]), sep=' '))
print(paste('p1 Mean:', mean(mchain[0:NREP,2]), sep=' '))
print(paste('p2 Mean:', mean(mchain[0:NREP,3]), sep=' '))
csv_file <- read.csv(file = 'C:/Users/robby/Documents/Advanced Data Science for BME/AdvancedDataScienceFinalProject/Data/chronic_kidney_disease.csv')
View(csv_file)
csv_file <- read.csv(file = 'C:/Users/robby/Documents/Advanced Data Science for BME/AdvancedDataScienceFinalProject/Data/chronic_kidney_disease.csv')
csv_file.rbcc
csv_file["rbcc"]
csv_file["rbcc"][2] == NA
x = csv_file["rbcc"]
x[2]
x(2)
View(x)
x[1]
x[1,1]
x[1,2]
x = csv_file["rbc"]
x[1,1]
csv_file <- read.csv(file = 'C:/Users/robby/Documents/Advanced Data Science for BME/AdvancedDataScienceFinalProject/Data/chronic_kidney_disease.csv')
View(csv_file)
csv_file <- read.csv(file = 'C:/Users/robby/Documents/Advanced Data Science for BME/AdvancedDataScienceFinalProject/Data/chronic_kidney_disease.csv')
View(csv_file)
csv_file <- read.csv(file = 'C:/Users/robby/Documents/Advanced Data Science for BME/AdvancedDataScienceFinalProject/Data/chronic_kidney_disease.csv')
View(csv_file)
set.seed(4)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]))
rf_model
predictions <- predict(rf_model, test[, -25])
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- predict(rf_model, test[, -25])
predictions
max(predictions)
predictions.values
predictions <- predict(rf_model, test[, -25])
labels <- as.factor(test[ ,25])
perf <- prediction(predictions, labels)
predictions <- as.list(predict(rf_model, test[, -25]))
labels <- as.list(as.factor(test[ ,25]))
View(labels)
labels
labels[1]
test
test[,25]
test$class
levels(test$class)
predictions <- predict(rf_model, test[, -25], type='prob')
labels <- as.list(as.factor(test[ ,25]))
pred <- prediction(predictions, labels)
predictions <- predict(rf_model, test[, -25], type='prob')
labels <- as.factor(test[ ,25])
pred <- prediction(predictions, labels)
test$class
rf_model$test$predicted
rf_model$test$predicted[0]
rf_model$test$predicted[1]
rf_model$test$predicted[:,1]
rf_model$test$predicted[,1]
varImpPlot(rf_model)
predicted <- predict(rf_model, test[,-25])
table(predicted, test$class)
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
auc <- performance(pred,"auc")
print(auc)
print(auc[[1]])
print(auc[1])
print(auc$y.values)
auc
print(auc)
print(auc@y.values)
auc <- performance(pred,"auc")@y.values
auc <- performance(pred,"auc")@y.values[1]
auc
auc[1]
auc <- performance(pred,"auc")@y.values
auc <- unlist(performance(pred,"auc")@y.values)
auc
set.seed(4)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
load("perf.Rdata")
setwd("~/Advanced Data Science for BME/AdvancedDataScienceFinalProject")
set.seed(4)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(2)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(1)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(0)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(1234)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(123)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(12345)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(123)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(122)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(121)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(12)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(11)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(10)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
set.seed(19)
set.seed(19)
library(randomForest)
library(ROCR)
address <- "https://raw.githubusercontent.com/vrose99/AdvancedDataScienceFinalProject/8acd472133dda8bf77b87648d281237419c7fced/Data/chronic_kidney_disease.csv"
raw_data <- read.csv(address)
filtered_data <- raw_data[rowSums(is.na(raw_data[ , 1:25])) == 0, ]
test_inds <- sample(1:nrow(filtered_data), floor(0.2 * nrow(filtered_data)))
train <- filtered_data[-test_inds, ]
test <- filtered_data[test_inds, ]
rf_model <- randomForest(train[ ,-25], as.factor(train[ ,25]), test[ ,-25], as.factor(test[ ,25]), keep.forest=TRUE)
rf_model
predictions <- as.numeric(predict(rf_model, test[,-25], type = 'response'))
pred <- prediction(predictions, test$class)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- unlist(performance(pred,"auc")@y.values)
save(perf, file = "perf.Rdata")
save(auc, file = "auc.Rdata")
save(rf_model, file="randomForestModel.Rdata")
